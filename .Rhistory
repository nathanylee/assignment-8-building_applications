install.packages('BH')
install.packages("twitteR")
library(dplyr)
library(jsonlite)
library(knitr)
library(twitteR)
username <- "INFO-498F"
api_key <- "704134402985492480-suS0FwxQGKy89ODO1jnb7PoKRoKHiWL"
base_url <- "https://twitter.com/search?q=data%20mining&src=typd"
library(dplyr)
library(jsonlite)
library(knitr)
library(twitteR)
username <- "INFO-498F"
api_key <- "704134402985492480-suS0FwxQGKy89ODO1jnb7PoKRoKHiWL"
base_url <- "https://twitter.com/search?q=data%20mining&src=typd"
library(dplyr)
library(jsonlite)
library(knitr)
library(twitteR)
api_key <- "704134402985492480-suS0FwxQGKy89ODO1jnb7PoKRoKHiWL"
base_url <- "https://api.twitter.com/1.1/search/tweets.json?"
event_tag <- "SB50"
api_query <- paste0(base_url, "q=%23", event_tag, "&result_type=popular", "&count=100")
data <- fromJSON(api_query)
api_query
install.packages('ROAuth')
install.packages('Rjsonio')
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
tabpanel('Scatter',
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Creates a slider
# Input to select variable to map
#Create a slider
selectInput(
),
# Create selection box
selectInput(
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
)
)
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
data(iris)
shinyServer(function(input, output) {
})
data("iris")
data(iris)
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
data(iris)
View(iris)
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
dataset <- data(iris)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
plot_ly(data = dataset, x = input$xaxis, y = input$yaxis, mode = "markers", color = "Species")
})
})
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
setwd("C:/Users/Nathan/Documents/info498f/lecture-15-exercises/exercise-2")
# Read in data
library(plotly)
library(shiny)
library(dplyr)
source('build_map.R')
source('build_scatter.R')
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
shinyServer(function(input, output) {
# Create a map via your build_map function
output$map <- renderPlotly({
build_map(data, input$export)
})
# Render your scatterplot as part of your `output` element
output$scatter <- renderPlotly({
build_scatter(data, input$xvar, input$yvar, input$search)
})
})
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='nathanylee',
token='6F5C136CA324EE60FCC451E2ECE28160',
secret='<SECRET>')
rsconnect::setAccountInfo(name='nathanylee',
token='6F5C136CA324EE60FCC451E2ECE28160',
secret='YKB+65PAfpzVVqUNPsp+yeUoQQqjbB+QYKyXgd1a')
shiny::runApp('~/info498f/assignment-8-building_applications')
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
# Create sidebar layout
sidebarLayout(
# Side panel for controls
titlePanel('Iris Dataset'),
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
"Sepal Length" = "Sepal.Length",
choices = list(
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width"
)
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width")
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width")
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
shiny::runApp()
shiny::runApp('~/info498f/assignment-8-building_applications')
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
library(rsconnect)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
dataset <- data(iris)
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
plot_ly(data = dataset, x = input$xaxis, y = input$yaxis, mode = "markers", color = "Species")
})
})
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width")
)
),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width")
)
),
# Main panel: display scatter plot
mainPanel(
plotlyOutput('scatter')
)
)
))
# Server.r
setwd("C:/Users/Nathan/Documents/info498f/lecture-15-exercises/exercise-2")
# Read in data
library(rsconnect)
library(plotly)
library(shiny)
library(dplyr)
source('build_map.R')
source('build_scatter.R')
data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
shinyServer(function(input, output) {
# Create a map via your build_map function
output$map <- renderPlotly({
build_map(data, input$export)
})
# Render your scatterplot as part of your `output` element
output$scatter <- renderPlotly({
build_scatter(data, input$xvar, input$yvar, input$search)
})
})
shiny::runApp()
shiny::runApp('~/info498f/lecture-15-exercises/exercise-1')
shiny::runApp('~/info498f/assignment-8-building_applications')
shiny::runApp('~/info498f/assignment-8-building_applications')
shiny::runApp('~/info498f/assignment-8-building_applications')
shiny::runApp('~/info498f/assignment-8-building_applications')
dataset <- data(iris)
shiny::runApp('~/info498f/assignment-8-building_applications')
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
library(rsconnect)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
#dataset <- data(iris)
data <- iris
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
plot_ly(data, x = input$xaxis, y = input$yaxis, mode = "markers", color = "Species")
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
library(rsconnect)
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
#dataset <- data(iris)
dataset <- iris
shinyServer(function(input, output) {
output$scatter <- renderPlotly({
plot_ly(data = dataset, x = input$xaxis, y = input$yaxis, mode = "markers", color = iris$Species)
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('ggplot2')
install.packages("ggplot2")
shiny::runApp()
shiny::runApp()
choices = list(
"Sepal Width" = Sepal.Width,
"Sepal Length" = "Sepal.Length",
"Pedal Length" = "Pedal.Length",
"Pedal Width" = "Pedal.Width")
"Sepal Width" = Sepal.Width,
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
library(rsconnect)
library(ggplot2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
rsconnect::showLogs()
library(plotly)
library(shiny)
library(dplyr)
shinyUI(fluidPage(
# Create a title
titlePanel('Iris Dataset'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Create radio buttons manipulating the variable on the X-Axis
#selectInput(
radioButtons("xaxis", label=h3("X Axis Input"),
choices = list("Sepal Length" = "Sepal.Length",
"Sepal Width" = "Sepal.Width",
"Pedal Length" = "Petal.Length",
"Pedal Width" = "Petal.Width")
),
# ),
# Create selection box manipulating the variable on the Y-Axis
selectInput("yaxis", label=h3("Y Axis Input"),
choices = list(
"Sepal Width" = "Sepal.Width",
"Sepal Length" = "Sepal.Length",
"Petal Length" = "Petal.Length",
"Petal Width" = "Petal.Width")
)
),
# Main panel: display scatter plot and header that indicates what two variables are being compared.
mainPanel(
h3(textOutput("caption")),
plotOutput('scatter')
#plotlyOuput('scatter')
)
)
))
library(plotly)
library(shiny)
library(datasets)
library(dplyr)
library(rsconnect)
library(ggplot2)
#setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications")
setwd("C:/Users/Nathan/Documents/info498f/assignment-8-building_applications/rsconnect/shinyapps.io/nathanylee")
#dataset <- data(iris)
dataset <- iris
shinyServer(function(input, output) {
#output$scatter <- renderPlotly({
#plot_ly(data = dataset, x = input$xaxis, y = input$yaxis, mode = "markers", color = Species)
#})
#output$scatter <- renderPlotly({
#plot_ly(data = dataset, x = Sepal.Length, y = Sepal.Width, mode = "markers", color = Species)
#})
# Create header for the scatter plot
graph_header <- reactive({
paste(input$xaxis, " compared to ", input$yaxis)
})
# Return header for the scatter plot
output$caption <- renderText({
graph_header()
})
# Create the scatter plot
output$scatter <- renderPlot({
p <- ggplot(iris, aes_string(x=input$xaxis, y=input$yaxis, colour="Species")) + geom_point()
print(p)
})
})
runApp("a8")
getwd()
deployApp()
getwd()
deployApp()
devtools::install_github('rstudio/shinyapps')
getwd()
getwd()
getwd()
